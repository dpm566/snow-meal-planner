<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope, $window, $timeout, $interval) {
    /* widget controller */
    var c = this;
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.flex-item-card {&#13;
  display: block;&#13;
  position: relative;&#13;
}&#13;
&#13;
.rfy-empty-state {&#13;
	text-align: center;&#13;
	height: 15rem;&#13;
	display: flex;&#13;
	justify-content: center;&#13;
	align-items: center;&#13;
	padding: 2.4rem;&#13;
	p{&#13;
		font-size: $font-size-base;&#13;
		color: $text-secondary;&#13;
	}&#13;
}&#13;
&#13;
.recommendations-dashboard-section {&#13;
  position: relative;&#13;
  background: $background-primary;&#13;
  box-shadow: 0 0 1rem #e5e5e5;&#13;
  flex-direction: column;&#13;
  display: flex;&#13;
  box-sizing: border-box;&#13;
  border-radius: $border-radius-large;&#13;
  margin-bottom: $sp-space--lg;&#13;
  &#13;
  .panel-heading {&#13;
    padding: $sp-space--xl !important;&#13;
  }&#13;
  &#13;
  .panel-body {&#13;
    padding: 0;&#13;
  }&#13;
}&#13;
&#13;
.h1.panel-title:focus {&#13;
  outline: 5px auto $input-border-focus;&#13;
}&#13;
&#13;
.swipe-button:focus {&#13;
  outline: 5px auto $input-border-focus;&#13;
}&#13;
&#13;
&#13;
.min-view {&#13;
  max-width: 850px;&#13;
}&#13;
&#13;
.max-view {&#13;
  max-width: 1170px;&#13;
}&#13;
&#13;
.line {&#13;
  width: 100%;&#13;
  border: 1px solid $panel-default-border;&#13;
}&#13;
&#13;
.recommended-card-section {&#13;
  /*height: 283px;*/&#13;
}&#13;
&#13;
.card-border {&#13;
 /* border-radius: $border-radius-base;&#13;
  border: 1px solid $panel-default-border;*/&#13;
}&#13;
&#13;
.card-border:hover {&#13;
  box-shadow: 0rem 0.2rem 1rem #E5E5E5;&#13;
}&#13;
&#13;
.swipe-button {&#13;
  text-align: center;&#13;
  display: flex;&#13;
  align-items: center;&#13;
  justify-content: center;&#13;
  background: $gray-base;&#13;
  border-radius: 15px;&#13;
  width: 30px;&#13;
  height: 30px;&#13;
  position: absolute;&#13;
  top: 160px;&#13;
  margin-left: -10px;&#13;
}&#13;
&#13;
#icon {&#13;
  cursor: pointer;&#13;
  width: 8.62px;&#13;
  padding-right: 15px;&#13;
  font-weight: bold;&#13;
  color: $body-bg;&#13;
}&#13;
&#13;
.contents-section {&#13;
  padding: 10px $sp-space--lg;&#13;
  display: grid;&#13;
  grid-template-columns: repeat(auto-fit, minmax(258px, 1fr));&#13;
&#13;
}&#13;
&#13;
.content-section-single-cards {&#13;
  display: flex;&#13;
  flex-direction: column;&#13;
  flex-flow: row wrap;&#13;
  scroll-behaviour: smooth;&#13;
}&#13;
&#13;
@-moz-document url-prefix() {&#13;
  #card-list-contents-section {&#13;
    margin-bottom: 20px;&#13;
    padding: 8px;&#13;
  }&#13;
}&#13;
&#13;
.card-body-content {&#13;
  width: 258px;&#13;
}&#13;
&#13;
#card-list-contents-section {&#13;
  overflow: hidden;&#13;
}&#13;
&#13;
#card-list-widget-body {&#13;
  width: 250px;&#13;
  height: 300px;&#13;
}&#13;
.wrap {&#13;
  #card-list-widget-body {&#13;
    width: auto;&#13;
    max-width: 500px;&#13;
  }&#13;
}&#13;
&#13;
// Apply padding only when screen size &gt; 320px (400% zoom level in WCAG resolution) to avoid loss of content&#13;
@media screen and (min-width: 321px) {&#13;
  #body-content {&#13;
    padding: 10px 8px;&#13;
  }&#13;
}&#13;
&#13;
.content-card {&#13;
  height: 170px !important;&#13;
}&#13;
&#13;
.content-card:focus {&#13;
  border: 0;&#13;
}&#13;
&#13;
::-webkit-scrollbar {&#13;
  display: none;&#13;
  box-shadow: none;&#13;
}&#13;
&#13;
@media screen and (max-width: 368px) {&#13;
  #card-list-widget-body {&#13;
    width: 25rem;&#13;
    margin: 0 0.2rem;&#13;
  }&#13;
}&#13;
/* IE specific Class to override */&#13;
@media screen and (-ms-high-contrast: active),&#13;
  (-ms-high-contrast: none) {&#13;
    .recommended-card-section{&#13;
      .card-text-container{&#13;
        min-width: 1px;&#13;
        .text-ellipsis{&#13;
          max-width: 100%;&#13;
        }&#13;
      }&#13;
    }&#13;
    #simple-link-contents-section {&#13;
      display: flex;&#13;
      flex-flow: row wrap;&#13;
      justify-content: space-between;&#13;
      .simple-link {&#13;
        width: 350px;&#13;
        max-width: 350px;&#13;
      }&#13;
    }&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>Parent widget to organize recipes in a layout suitable for the page</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>mp-display-recipes</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Meal Planner - Display Recipes</name>
        <option_schema>[{"name":"title","section":"other","default_value":"Recipes","label":"Title","type":"string"},{"hint":"Max value expected here is 10","name":"limit","section":"other","default_value":"3","label":"Limit","type":"integer"},{"name":"list_type","section":"other","default_value":"Card List","label":"List Type","type":"choice","choices":[{"label":"Card List","value":"Card List"},{"label":"Simple List","value":"Simple List"}]},{"name":"card_behaviour","section":"other","default_value":"single","label":"Card Behaviour","type":"choice","choices":[{"label":"single","value":"single"},{"label":"wrap","value":"wrap"}]},{"hint":"Shows empty state if the widget content is empty.","name":"show_empty_state","section":"other","default_value":"false","label":"Show empty state","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    var maxDisplayCount = 10;
    data.instanceId = $sp.getDisplayValue("sys_id");
    data.title = gs.getMessage(options.title);
    data.contentTable = "x_62500_mealplan_recipe";
    data.cardType = (options.list_type === 'Card List') ? options.card_behaviour + '' : '';
    data.listType = (options.list_type === 'Card List') ? 'card-list' : 'simple-link';
    data.showEmptyState = options.show_empty_state;
    data.showRecipesAction = true;
    data.showAddAction = true;
    data.showRemoveAction = false;

    data.recipeCardDisplayWidgetTemplate = "mp-content-card-v3";
    data.dataItems = getRecipesForMealPlan();
    data.widgetsData = getWidgetsData(data.dataItems, data.listType);


    function getWidgetsData(dataResults, listType) {
        listType = (listType === 'card-list') ? 'card' : 'simple_link';
        var dataPayload = [];
        dataResults.forEach(function(item) {
            var itemPayload = {};
            var widgetName = "mp-recipe-content";
            itemPayload.widgetSysId = "379a83649741021069a3b6fce053af4d";
            itemPayload.widgetTitle = data.title;
            itemPayload.content = item.sys_id;
            itemPayload.contentLinkedToRecorSysID = "";
            itemPayload.content_table = data.contentTable;
            itemPayload.listType = listType;
            itemPayload.showRecipesAction = data.showRecipesAction;
            itemPayload.showAddAction = data.showAddAction;
            itemPayload.showRemoveAction = data.showRemoveAction;
            itemPayload.recipeCardDisplayWidgetTemplate = data.recipeCardDisplayWidgetTemplate;
            itemPayload.widgetData = $sp.getWidget(widgetName, itemPayload);
            dataPayload.push(itemPayload.widgetData);
        });
        return dataPayload;
    }

    /*_________________________________________________________________
 	* Description: Return the recipes list for the last meal plan
 	* Parameters: 
	mealPlan: {string} sys_id of the meal plan record
 	* Returns: 
	{array} list of recipe sys_ids
	__________________________________________________________________*/
    function getRecipesForMealPlan() {

        var recipes = [];
        var includedRecipesGR = new GlideRecord("x_62500_mealplan_recipe");
        //    includedRecipesGR.addQuery("meal_plan", mealPlan);
        //  includedRecipesGR.addNotNullQuery("recipe");
        includedRecipesGR.orderByDesc("sys_updated_on");
        includedRecipesGR.setLimit(50);
        includedRecipesGR.query();
        while (includedRecipesGR.next()) {
            recipes.push({
                "sys_id": includedRecipesGR.getValue("sys_id")
            });
        }
        return recipes;
    }




})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-03-17 03:10:52</sys_created_on>
        <sys_id>bd11236097c1021069a3b6fce053af96</sys_id>
        <sys_mod_count>34</sys_mod_count>
        <sys_name>Meal Planner - Display Recipes</sys_name>
        <sys_package display_value="Meal Planner" source="x_62500_mealplan">b64f09f19734021069a3b6fce053af1a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Meal Planner">b64f09f19734021069a3b6fce053af1a</sys_scope>
        <sys_update_name>sp_widget_bd11236097c1021069a3b6fce053af96</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-19 06:23:29</sys_updated_on>
        <template><![CDATA[<div id="recommendations-dashboard-section" class="recommendations-dashboard-section panel panel-default b panel-wrapper instance-{{c.data.instanceId}}" ng-if = "(c.data.widgetsData.length > 0 && c.data.instanceId.length > 0) || data.showEmptyState === 'true'" ng-class="(c.data.listType === 'simple-link' || c.data.cardType === 'wrap') || (data.showEmptyState === 'true' && (c.data.widgetsData.length === 0 || c.data.instanceId.length === 0)) ? '': 'recommended-card-section'">
  <div class="panel-heading b-b">
    <h3 class="panel-title">
      {{::c.data.title}}
    </h3>
  </div>
  <div class="rfy-empty-state" ng-if = "data.showEmptyState === 'true' && (c.data.widgetsData.length === 0 || c.data.instanceId.length === 0)">
    <p>
      ${We don't have any recipes to show you yet.}
    </p>
  </div>
  <div class="panel-body" ng-if = "c.data.widgetsData.length > 0 && c.data.instanceId.length > 0">
    <div class="contents-section {{c.data.instanceId}}-contents-section" id="{{c.data.listType}}-contents-section" ng-class="(c.data.cardType === 'single' && c.data.listType === 'card-list') ? 'content-section-single-cards' : ''">
      <div id="body-content" class="{{c.options.card_behaviour}} {{c.data.listType}} {{c.data.instanceId}}-body-content" ng-repeat="widgetData in c.data.widgetsData" ng-class="c.data.listType === 'simple-link' ? '': 'card-body-content'">
        <div class="flex-item-card" id="{{c.data.listType}}-widget-body" ng-class="{'card-border' : c.data.listType === 'card-list'}">
          <sp-widget widget="widgetData"></sp-widget>
        </div>
      </div>
    </div>
    <div tabindex="-1" role="button" aria-label="${previous}" ng-show="c.showLeftArrow()" ng-if="c.data.cardType === 'single' && c.data.listType === 'card-list'" class="swipe-button" id="{{c.data.instanceId}}-left-swipe" ng-click="c.moveLeft()"><span class="glyphicon glyphicon-menu-left" id="icon"></span></div>
    <div tabindex="-1" role="button" aria-label="${next}" ng-show="c.showRightArrow()" ng-if="c.data.cardType === 'single' && c.data.listType === 'card-list'" class="swipe-button" id="{{c.data.instanceId}}-right-swipe" ng-click="c.moveRight()" ng-style="{marginLeft: c.getRightSwipeMargin()}"><span class="glyphicon glyphicon-menu-right" id="icon"></span></div>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
